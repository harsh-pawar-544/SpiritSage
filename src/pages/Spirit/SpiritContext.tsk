// src/contexts/SpiritsContext.tsx

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from 'react';
import { supabase } from '../lib/supabaseClient'; // Make sure this path is correct!

// Define interfaces for your Supabase data based on your tables
interface AlcoholType {
  id: string; // Or number, depending on your Supabase table ID type
  name: string;
  description: string;
  image_url: string | null; // Assuming you have this column in Supabase
  // Add other properties as per your 'alcohol_types' table
}

interface Subtype {
  id: string; // Or number
  name: string;
  description: string;
  image_url: string | null;
  alcohol_type_id: string; // Foreign key
  // Add other properties as per your 'subtypes' table
}

interface Spirit {
  id: string; // Or number (for individual brands/products)
  name: string;
  description: string;
  image_url: string | null;
  subtype_id: string; // Foreign key
  avg_rating?: number; // Add if you store this directly or calculate it
  // Add other properties as per your 'spirits' or 'brands' table
}

interface Rating {
  id: string; // Or number
  spirit_id: string; // Foreign key
  user_id: string;
  user_name: string; // Or fetch from user profile
  rating: number;
  comment: string;
  created_at: string;
}

// Define the shape of your context value
interface SpiritsContextType {
  alcoholTypes: AlcoholType[];
  loading: boolean;
  error: string | null;
  getCategoryById: (id: string) => Promise<AlcoholType | null>;
  getSubtypesByCategoryId: (categoryId: string) => Promise<Subtype[]>;
  getSpiritsBySubtypeId: (subtypeId: string) => Promise<Spirit[]>;
  getSpiritById: (spiritId: string) => Promise<Spirit | null>;
  getRatingsForSpirit: (spiritId: string) => Rating[]; // Assuming this is mock for now
  // You might want to add functions for adding ratings later
}

const SpiritsContext = createContext<SpiritsContextType | undefined>(undefined);

export const SpiritsProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [alcoholTypes, setAlcoholTypes] = useState<AlcoholType[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Function to fetch all main alcohol types
  useEffect(() => {
    const fetchAlcoholTypes = async () => {
      try {
        setLoading(true);
        const { data, error: fetchError } = await supabase
          .from('alcohol_types') // Your main categories table name
          .select('*')
          .order('name', { ascending: true }); // Order them alphabetically

        if (fetchError) {
          throw new Error(fetchError.message || 'Failed to fetch alcohol types.');
        }
        setAlcoholTypes(data || []);
      } catch (err: any) {
        setError(err.message);
        console.error('Error fetching alcohol types:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchAlcoholTypes();
  }, []);

  // Function to get a single category by ID
  const getCategoryById = useCallback(
    async (id: string): Promise<AlcoholType | null> => {
      // First, try to find in already fetched alcoholTypes to avoid extra API call
      const foundInState = alcoholTypes.find((type) => type.id === id);
      if (foundInState) return foundInState;

      // If not found in state, fetch from Supabase
      try {
        const { data, error: fetchError } = await supabase
          .from('alcohol_types')
          .select('*')
          .eq('id', id)
          .single();

        if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 means no rows found
          throw new Error(fetchError.message || 'Failed to fetch category.');
        }
        return data as AlcoholType || null;
      } catch (err) {
        console.error('Error fetching category by ID:', err);
        return null;
      }
    },
    [alcoholTypes]
  ); // Dependency array includes alcoholTypes

  // Function to get subtypes for a given alcohol category ID
  const getSubtypesByCategoryId = useCallback(
    async (categoryId: string): Promise<Subtype[]> => {
      try {
        const { data, error: fetchError } = await supabase
          .from('subtypes') // Your subtypes table name
          .select('*')
          .eq('alcohol_type_id', categoryId)
          .order('name', { ascending: true });

        if (fetchError) {
          throw new Error(fetchError.message || 'Failed to fetch subtypes.');
        }
        return data as Subtype[] || [];
      } catch (err) {
        console.error('Error fetching subtypes by category ID:', err);
        return [];
      }
    },
    []
  );

  // Function to get individual spirits (brands) for a given subtype ID
  const getSpiritsBySubtypeId = useCallback(
    async (subtypeId: string): Promise<Spirit[]> => {
      try {
        const { data, error: fetchError } = await supabase
          .from('spirits') // Your individual spirits/brands table name
          .select('*')
          .eq('subtype_id', subtypeId)
          .order('name', { ascending: true });

        if (fetchError) {
          throw new Error(fetchError.message || 'Failed to fetch spirits by subtype.');
        }
        return data as Spirit[] || [];
      } catch (err) {
        console.error('Error fetching spirits by subtype ID:', err);
        return [];
      }
    },
    []
  );

  // Function to get a single spirit (brand) by ID
  const getSpiritById = useCallback(
    async (spiritId: string): Promise<Spirit | null> => {
      try {
        const { data, error: fetchError } = await supabase
          .from('spirits') // Your individual spirits/brands table name
          .select('*')
          .eq('id', spiritId)
          .single();

        if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 means no rows found
          throw new Error(fetchError.message || 'Failed to fetch spirit.');
        }
        return data as Spirit || null;
      } catch (err) {
        console.error('Error fetching spirit by ID:', err);
        return null;
      }
    },
    []
  );

  // Placeholder for ratings (assuming you might fetch these or they are related to spirits)
  // You might want to replace this with actual Supabase fetching for ratings
  const getRatingsForSpirit = useCallback((spiritId: string): Rating[] => {
    // This is a placeholder. You'll need to implement actual fetching from Supabase 'ratings' table
    // or integrate with your mock data for now.
    console.warn(`[SpiritsContext]: getRatingsForSpirit(${spiritId}) is a placeholder.`);
    // Example for mock (if you re-add mock data temporarily):
    // return mockRatingsAndComments.filter(rating => rating.spiritId === spiritId);
    return [];
  }, []);


  const contextValue = {
    alcoholTypes,
    loading,
    error,
    getCategoryById,
    getSubtypesByCategoryId,
    getSpiritsBySubtypeId,
    getSpiritById,
    getRatingsForSpirit,
  };

  return (
    <SpiritsContext.Provider value={contextValue}>
      {children}
    </SpiritsContext.Provider>
  );
};

// Custom hook to use the SpiritsContext
export const useSpirits = () => {
  const context = useContext(SpiritsContext);
  if (context === undefined) {
    throw new Error('useSpirits must be used within a SpiritsProvider');
  }
  return context;
};